Describe the partitioning schemes that you implemented. For each partitioning scheme, characterize the input graphs to which it is ideally suited.

Scheme 1 creates one partition of r_links (link_edge) and two partitions of r_pages (page_edge, page_node). The links are equally paritioned (edge-partitioned) so that each CPU is allocated an equal number of links to loop through in the PageRank task. The node partition page_edge is just the partition of pages which are connected by the links in link_edge, so those are fed into PageRank. Then, for calculating the error, page_node, an equal partition of nodes, is used so that the cpu's receive an equal load when looping through all nodes. Scheme 1 will work well when there is one or a few nodes that have many links pointing or away from them, since the links will be broken up equally and the workload (for PageRank) will be distributed equally. 

Scheme 2 creates an equal partition of pages (page_node) and then partitions the links by their connections with target nodes. This scheme will work well when the nodes in the graph network have equal or comparable number of links pointing to each node. This scheme will not work well when there is one or a few nodes that have many links pointing to it. 
